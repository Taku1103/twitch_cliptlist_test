# ----------------------------------------------------------------------------------
# Dockerは本来、ビルドする度にコンテナを作り直すので、簡単にファイルが初期化されてしまう。
# しかし、それだと不便。環境を少し変えたいだけで、ファイルが全部初期化されてはたまったものではない。
# バインドマウントをして、dokcerコンテナにホストをマウント。これにより、ホストのディレクトリとコンテナ内のディレクトリを同期できる。
# 後はvolumeというものを作成し、そことファイルを同期することで、初期化を防ぐ、ボリュームマウントも存在する。
# 今回はdb-volumeというvolumeを作成し、そこにDBコンテナ内のディレクトリをマウント(同期)している。DBはホストとファイルを同期する必要がないので、これで管理。
# ----------------------------------------------------------------------------------

version: "3"
services:
  api:
    build: ./backend/
    command: /bin/sh -c "rm -f tmp/pids/server.pid && bundle exec rails s -p 3000 -b '0.0.0.0'"
    volumes:
      - ./backend:/api
    environment:
      TZ: "Asia/Tokyo"
    ports:
      - 3001:3000
    depends_on:
      - db
    tty: true
    stdin_open: true
    networks:
      - mynetwork
  db:
    image: mysql:latest
    command: mysqld --character-set-server=utf8 --collation-server=utf8_unicode_ci --default-time-zone=Asia/Tokyo
    volumes:
      - db-volume:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: password
      TZ: "Asia/Tokyo"
    ports:
      - "3310:3310"
    networks:
      - mynetwork
  front:
    build: ./frontend/
    tty: true
    volumes:
      - ./frontend/src:/front
    ports:
      - "3000:3000"
    environment:
      - WATCHPACK_POLLING=true
      - TZ=Asia/Tokyo
    command: sh -c "npm install next && PORT=3000 npm run dev && npm install"
    networks:
      - mynetwork

volumes:
  db-volume:

networks:
  mynetwork:
    external: true
